////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// GMCTReadMCData                                                             //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
// This task accesses the following folders :                                 //
//     DCHHit                                                                 //
//     MPXHit                                                                 //
//                                                                            //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/GMCTReadMCDataGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "TROOT.h"
#include "TString.h"
#include "TClass.h"
#include "TVector3.h"
#include "TFile.h"
#include "TMath.h"


#include "generated/GMCAnalyzer.h"
#include "generated/GMCConfigToForm.h"
#include "generated/GMCMCRunHeader.h"
#include "generated/GMCGeantTrack.h"
#include "generated/GMCDCGeantStep.h"
#include "generated/GMCPXGeantStep.h"
#include "generated/GMCDCHHit.h" 

#include "generated/GMCEventLoop.h"

#include "util/CreateClusters.h"
#include "util/ClusterSize.h"
#include "util/Geometry.h"
#include "tasks/GMCTReadMCData.h"
#include "ROMEiostream.h"

//#include "Cintex/Cintex.h"
// uncomment if you want to include headers of all folders
//#include "GMCAllFolders.h"


ClassImp(GMCTReadMCData)

//______________________________________________________________________________
void GMCTReadMCData::Init() {

  //instance the geometry
  fGeometry = Geometry::GetInstance();

  TString dPath = gAnalyzer->GetInputDir();
  Int_t runNr = gAnalyzer->GetRunNumberAt(0);

  //  TString filename = gAnalyzer->GetInputFileNamesStringOriginal();
  TString filename(Form("MCData%05d.root",runNr));

  std::cout<<"Load manually the file data : "<<filename.Data()<<std::endl;

  TFile *fIn = TFile::Open(Form("%s/%s",dPath.Data(),filename.Data()));

  if (fIn->IsOpen()) printf(" ***** The file is open correctly!!! \n");
  else {
  
     printf(" ***** Error in opening file data !!! \n");
     return;
  }
  
  fDataTree = (TTree*)fIn->Get("MCData");

  if (fDataTree->GetEntries() == 0) {
  
     printf(" ***** File data is empty !!! \n");
     return;
     
  }

}

//______________________________________________________________________________
void GMCTReadMCData::BeginOfRun(){

  printf(" ***** Set branching address \n");
  fBrDataTrk = new TClonesArray("GMCGeantTrack",0);
  fDataTree->SetBranchAddress("MCTracks",&fBrDataTrk);

  fBrDataDch = new TClonesArray("GMCDCGeantStep",0);
  fDataTree->SetBranchAddress("MCDCStep",&fBrDataDch);

  fBrDataMpx = new TClonesArray("GMCPXGeantStep",0);
  fDataTree->SetBranchAddress("MCPXStep",&fBrDataMpx);

}

//______________________________________________________________________________
void GMCTReadMCData::Event() {

  printf("\n ***** Load event %lld ************************ \n",gAnalyzer->GetCurrentEventNumber());
  LoadEvent(gAnalyzer->GetCurrentEventNumber());
  
  DefineHitsInDCH();
  
  DefineHitsInMPX();  

}

//______________________________________________________________________________
void GMCTReadMCData::LoadEvent(Int_t nev) {

  //return the nev-th event from data tree
  fDataTree->GetEntry(nev-1);

}

//______________________________________________________________________________
void GMCTReadMCData::DefineHitsInDCH() {

  Int_t ah_trkId;
  Int_t ah_chbId;
  Double_t ah_edep;
  TVector3 *ah_posIn, *ah_posOut;
  Int_t NrHits = 0;

  Bool_t fLoop = true;
  int istep = 0;
  for (;istep<fBrDataDch->GetEntries();istep++) {
    GMCDCGeantStep *aStep = (GMCDCGeantStep *)fBrDataDch->At(istep);
    ah_posOut = (TVector3*)aStep->GetfPosEnding();
    ah_trkId = aStep->GetfTrackID();
    ah_chbId = aStep->GetfChamberNr();
    ah_edep = aStep->GetfEdep();
    ah_posIn = (TVector3*)aStep->GetfPos();
    if (istep == fBrDataDch->GetEntries()-1) fLoop = false;
    
    while(fLoop) {
      istep++;
      GMCDCGeantStep *aStep = (GMCDCGeantStep *)fBrDataDch->At(istep);
      if (ah_chbId == aStep->GetfChamberNr()) {
        //same tube
        if (ah_trkId == aStep->GetfTrackID()) {
          //same track
          ah_posOut = (TVector3*)aStep->GetfPosEnding();
          ah_edep += aStep->GetfEdep();
        }
        else {
          fLoop = false;
          istep -= 1;
        }

        if (istep == fBrDataDch->GetEntries()-1) fLoop = false;
      }
      else {
        fLoop = false;
        istep -= 1;
      }
    }

    TVector3 TrkVector(ah_posOut->X()-ah_posIn->X(),
		       ah_posOut->Y()-ah_posIn->Y(),
		       ah_posOut->Z()-ah_posIn->Z());
    
    gAnalyzer->SetDCHHitSize(NrHits+1);
    GMCDCHHit *ahit = gAnalyzer->GetDCHHitAt(NrHits);
    
    DCACalculation(ah_chbId,*ah_posIn,TrkVector);
    
    printf(" \n ----> Tube nr. %d, track Id = %d : PCA = (%5.3f,%5.3f,%5.3f), distance = %7.5f mm  Energy deposit = %f\n",ah_chbId,ah_trkId,fCApoint.X(),fCApoint.Y(),fCApoint.Z(),fDCA,ah_edep);;

    ahit->SetfCellId(ah_chbId);
    ahit->SetfTrkIDofHit(ah_trkId);
    ahit->SetfxPCA(fCApoint.X());
    ahit->SetfyPCA(fCApoint.Y());
    ahit->SetfzPCA(fCApoint.Z());
    ahit->SetfEntranceX(ah_posIn->X());
    ahit->SetfEntranceY(ah_posIn->Y());
    ahit->SetfEntranceZ(ah_posIn->Z());
    ahit->SetfImpact(fDCA);
    ahit->SetfTotalEnergyLoss(ah_edep);
    ahit->SetfLength(TrkVector.Mag());
    DefineClustersInDCH(ahit,*ah_posIn,TrkVector);

    fLoop = true;
    NrHits++;
    
  }

}

//_____________________________________________________________________________
Bool_t GMCTReadMCData::DCACalculation(Int_t nCh, TVector3 pTrk, TVector3 trkDir) {

  //wire position: copied from Geant4 B2aDetectorConstruction.cc
  TVector3 wpos = fGeometry->Getwire_pos(nCh);

  TVector3 wdir = fGeometry->Getwire_dir(nCh);

  if (trkDir != TVector3(0.,0.,0.)) {

    TVector3 delta(wpos - pTrk);
    TVector3 crossprod = trkDir.Cross(wdir);

    Double_t detParT = delta.Dot(crossprod.Cross(-wdir));
    Double_t determ = trkDir.Dot(crossprod.Cross(-wdir));
    
    Double_t parT = detParT/determ;

    fCApoint = pTrk + trkDir*parT;  
  
    fDCA = fabs(delta.Dot(crossprod));
    fDCA /= crossprod.Mag();//diff.Mag();
  }
  else {
  
    fDCA = TMath::Sqrt(TMath::Power(wpos.Y()-pTrk.Y(),2) +
                       TMath::Power(wpos.Z()-pTrk.Z(),2));
                       
    fCApoint = pTrk;
  }
                       
  return 1;    
}

//______________________________________________________________________________
void GMCTReadMCData::DefineClustersInDCH(GMCDCHHit *ah,TVector3 pTrk, TVector3 trkDir) {

  TVector3 wdir = fGeometry->Getwire_dir(ah->GetfCellId());
  TVector3 wpos = fGeometry->Getwire_pos(ah->GetfCellId());

  
  if (trkDir != TVector3(0.,0.,0.)) {
    CreateClusters *clusters = new CreateClusters(ah->GetfLength());
    //CreateClusters *clusters = new CreateClusters(ah->GetfLength(),ah->GetfTotalEnergyLoss());
    
    Int_t ncl = clusters->GetNrClusters();
    TVector3 clrpos;
    
    ah->SetfNrClusters(ncl); 
    ah->SetfClsDistanceSize(ncl);
    ah->SetfClsDistanceSmearedSize(ncl);
    ah->SetfClsChargeSize(ncl);
    ah->SetfClsPathPosSize(ncl);
    
    Double_t  dist, par;  
    Int_t sumc = 0;
    for (int icl=0;icl<ncl;icl++) {
      dist = clusters->GetClusterPositionAt(icl);  
      par = dist/ah->GetfLength();
      clrpos = pTrk + par*trkDir; 
      
      ah->SetfClsPathPosAt(icl,dist);
      
      TVector3 diff = clrpos - wpos;
      Double_t sdist = TMath::Sqrt(diff.Mag2()-TMath::Power(diff.Dot(wdir),2));
      
      ah->SetfClsDistanceAt(icl,sdist);
      
      ah->SetfClsChargeAt(icl,clusters->GetClusterChargeAt(icl));  
      sumc += clusters->GetClusterChargeAt(icl);
      
      ah->SetfClsDistanceSmearedAt(icl,sdist+clusters->GetClusterSmearingAt(icl));
    
    }

    ah->SetfTotalCharge(sumc);
  }
}

//______________________________________________________________________________
void GMCTReadMCData::DefineHitsInMPX() {

   
  Double_t halfLengPX_mod = 0.5*fGeometry->GetPixelModuleLength(); //in mm 
  Double_t pixSize = fGeometry->GetPixelSize();
  Double_t pitch = fGeometry->GetPixelPitch();
 
  Int_t ah_trkId;
  Int_t ah_pxId;
  Double_t ah_edep;
  TVector3 *ah_posIn;
  Int_t NrHits = 0;

  Bool_t fLoop = true;
  int istep = 0;
  for (;istep<fBrDataMpx->GetEntries();istep++) {
    ah_edep = 0.;

    GMCPXGeantStep *aStep = (GMCPXGeantStep *)fBrDataMpx->At(istep);
    ah_trkId = aStep->GetfTrackID();
    ah_pxId = aStep->GetfMpxNr();
    ah_edep = aStep->GetfEdep();
    ah_posIn = (TVector3*)aStep->GetfPos();
    if (istep == fBrDataMpx->GetEntries()-1) fLoop = false;
    while(fLoop) {
      istep++;
      GMCPXGeantStep *aStep = (GMCPXGeantStep *)fBrDataMpx->At(istep);
      if (ah_pxId == aStep->GetfMpxNr()) {
	//same tube
	if (ah_trkId == aStep->GetfTrackID()) {
	  //same track
	  ah_edep += aStep->GetfEdep();	  
	}
	else {
	  fLoop = false;
	  istep -= 1;
	}

	if (istep == fBrDataMpx->GetEntries()-1) fLoop = false;
      }
      else {
	fLoop = false;	
	istep -= 1;
      }
    }

    gAnalyzer->SetMPXHitSize(NrHits+1);
    GMCMPXHit *ahit = gAnalyzer->GetMPXHitAt(NrHits);
        
    ahit->SetfNrMPX(ah_pxId);
    ahit->SetfTrkIDofHit(ah_trkId);
    ahit->SetfxMC(ah_posIn->X());
    ahit->SetfyMC(ah_posIn->Y());
    ahit->SetfzMC(ah_posIn->Z());
    ahit->SetfTotalEnergyLoss(ah_edep);

    //pixel number calculation along x and y directions 
    Int_t npx = (int)(1000*(ah_posIn->X() + halfLengPX_mod)/(pixSize + pitch));
    ahit->SetfnrXpixel(npx);
    
    npx = (int)(1000*(ah_posIn->Y() + halfLengPX_mod)/(pixSize + pitch));
    ahit->SetfnrYpixel(npx);

    fLoop = true;
    NrHits++;
    
  }

}

//______________________________________________________________________________
void GMCTReadMCData::EndOfRun() {

  fDataTree->Reset();
  fBrDataTrk->Clear();
  fBrDataDch->Clear();
  fBrDataMpx->Clear();

}

//______________________________________________________________________________
void GMCTReadMCData::Terminate() {

  delete fDataTree;
  delete fBrDataTrk;
  delete fBrDataDch;
  delete fBrDataMpx;

}

