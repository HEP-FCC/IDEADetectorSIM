////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// GMCTReadData                                                               //
//                                                                            //
// Begin_Html <!--
/*-->

<!--*/
// --> End_Html
//                                                                            //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
// This task accesses the following folders :                                 //
//     ODB                                                                    //
//     Event                                                                  //
//     DCHHit                                                                 //
//                                                                            //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

/* Generated header file containing necessary includes                        */
#include "generated/GMCTReadDataGeneratedIncludes.h"

////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////

#include "generated/GMCAnalyzer.h"
#include "tasks/GMCTReadData.h"
#include "util/Waveform.h"
#include "util/Geometry.h"
#include "ROMEiostream.h"

#include <set>

#define  TDCSCALE 0.098

// uncomment if you want to include headers of all folders
//#include "GMCAllFolders.h"


ClassImp(GMCTReadData)

//______________________________________________________________________________
void GMCTReadData::Init()
{

  fGeom = Geometry::GetInstance();

  /***********
 if(gAnalyzer->GetMCHitSize()==0)
    cout<<"we are running only on real data! MCHit task is not active"<<endl;
  if(gAnalyzer->GetMCTrackSize()==0)
    cout<<"we are running only on real data! MCTrack task is not active"<<endl;
  ****************/
}

//______________________________________________________________________________
void GMCTReadData::BeginOfRun()
{

   cout << "Run Number : " << gAnalyzer->GetODB()->GetRunNumber() << endl;

   cout<<"leggo file "<<(gAnalyzer->GetGSP()->GetCablingFile()).Data()<<endl;


}

//______________________________________________________________________________
void GMCTReadData::Event()
{

  DWORD data;


  /////TDC
  cout<< "# TDC hits: " << gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()<<endl;
  int channels[gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()];
  int times[gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries()];

  int time0;
  int nHit=0;

  for(Int_t it=0;it<gAnalyzer->GetMidasDAQ()->GetTDC0BankEntries();it++){
   
    data = gAnalyzer->GetMidasDAQ()->GetTDC0BankAt(it);
    
    if((data & 0xf8000000) != 0x00000000) continue;

    int chan = 0x7F&(data>>19);
    int time = 0x7FFFF&data;

    cout<<"channel# "<<chan << "  " << time <<endl;

    if(fGeom->GetWireIndex(chan) == 0){ ///REFERENCE TIME
      time0=time;
      gAnalyzer->GetEvent()->SetTDCRefTime(time0*TDCSCALE);
    }
    else if(fGeom->GetWireIndex(chan) > 0){
      times[nHit]=time;
      channels[nHit]=chan;
      nHit++;
    }
  }

  //FILL HITS
  /*******************
  gAnalyzer->SetDCHHitSize(0);

  set<Int_t> done;

  for(Int_t it=0; it<nHit;it++){

    Int_t tube_nr = Geom->GetWireIndex(channels[it]);
    Double_t t_meas = (times[it]-time0)*TDCSCALE - Geom->GetTimeOffset(tube_nr);

    if(!done.count(tube_nr) && t_meas > -10 && t_meas < 250){

      gAnalyzer->SetDCHHitSize(gAnalyzer->GetHitSize()+1);

      //      gAnalyzer->GetDCHHitAt(done.size())->Sett_meas(t_meas);
      //      gAnalyzer->GetDCHHitAt(done.size())->Settube_nr(tube_nr);

      done.insert(tube_nr);

    }

  }
  ***************************/
  ///////DRS
  GMCEvent *event = gAnalyzer->GetEvent();
  event->SetDRSWaveformSize(8);

  float vdata, tdata;

  for(Int_t k=0;k<2;k++){

    for(Int_t i=0;i<4;i++){
      
      Waveform *wfdrs = event->GetDRSWaveformAt(4*k+i);

      Double_t tmpt[1024];
      Double_t tmpv[1024];
      
      for(Int_t j=0;j<1024;j++){
	
	if(k==0){
	  tdata = gAnalyzer->GetMidasDAQ()->GetDRS0BankAt(2048*i+2*j);
	  vdata = gAnalyzer->GetMidasDAQ()->GetDRS0BankAt(2048*i+2*j+1);
	}
	else{
	  tdata = gAnalyzer->GetMidasDAQ()->GetDRS1BankAt(2048*i+2*j);
	  vdata = gAnalyzer->GetMidasDAQ()->GetDRS1BankAt(2048*i+2*j+1);
	}

	tmpt[j] = tdata;
	tmpv[j] = vdata;
	
	//cout << tdata << "  " << vdata << endl;

	//cout << "DRS " << k << "  " << i << "  " << j << "  " << tmpt[j] << "  " << tmpv[j] << endl;

      }
      
      wfdrs->SetNPoints(1024);
      wfdrs->Set(1024,tmpt,tmpv);

    }

  }

  //////MEDIPIX
  
  int npix0 = gAnalyzer->GetMidasDAQ()->GetPIX0BankAt(0);

  event->SetModuPix0Size(npix0);

  int idPixel;
  for(Int_t i=1;i<=npix0;i++){

    GMCMPXHit *aHit = event->GetModuPix0At(i-1);
    aHit->SetfNrMPX(0);
    idPixel = gAnalyzer->GetMidasDAQ()->GetPIX0BankAt(i);
    aHit->SetfnrYpixel(idPixel/256);
    aHit->SetfnrXpixel(idPixel%256);
    //    cout << "pix0 " << idPixel <<" "<<idPixel%256<<"  "<<idPixel/256<<endl;

  }

  int npix1 = gAnalyzer->GetMidasDAQ()->GetPIX1BankAt(0);
  event->SetModuPix1Size(npix1);

  for(Int_t i=1;i<=npix1;i++){

    GMCMPXHit *aHit = event->GetModuPix1At(i-1);
    aHit->SetfNrMPX(1);
    idPixel = gAnalyzer->GetMidasDAQ()->GetPIX1BankAt(i);
    aHit->SetfnrYpixel(idPixel/256);
    aHit->SetfnrXpixel(idPixel%256);
    //    cout << "pix1 " << idPixel <<" "<<idPixel%256<<"  "<<idPixel/256<<endl;

  }

  ////////////

  /////OSCILLOSCOPE

  //Configuration
  data = gAnalyzer->GetMidasDAQ()->GetCONFBankAt(0);

  Int_t NSAMPLES[4] = {2502,5002,10002,20002};
  Float_t FREQ[4] = {1e9,2.5e9,5e9,10e9};
  Float_t UNIT[4] = {0.02,0.05,0.1,0.2};

  //TO BE TAKEN FROM ONLINE
  int fNCounts = NSAMPLES[(data & 0x3)];
  float SamplingFreq = FREQ[((data>>2) & 0x3)];
  int CentralTube = (data>>4) & 0xF;

  //cout << CentralTube << endl;

  if(CentralTube!=gAnalyzer->GetGSP()->Getcentral_tube()){

    cout<<"---------------------------------------------------------------------------------------------------------------------------"<<endl;
    cout<<"------------------------------------------DIFFERENT CENTRAL TUBES NUMBER---------------------------------------------------"<<endl;
    cout<<"------------------------------------CHANGE STEERING PARAMETER BEFORE CONITUE-----------------------------------------------"<<endl;
    cout<<"---------------------------------------------------------------------------------------------------------------------------"<<endl;

  }

  float unit1 = UNIT[(data>>10) & 0x3] * 8./255.;
  float unit2 = UNIT[(data>>14) & 0x3] * 8./255.;
  float unit3 = UNIT[(data>>18) & 0x3] * 8./255.;
  float unit4 = UNIT[(data>>22) & 0x3] * 8./255.;
  int NChanOsc = 4;

  set<int> index;
  for(Int_t i=0;i<4;i++) index.insert(i);


  ////CALORIMETER ALWAYS IN WF0
  /*
  int icalo;
  if(((data>>8) & 0x3) == 2) icalo = 0;
  else if(((data>>12) & 0x3) == 2) icalo = 1;
  else if(((data>>16) & 0x3) == 2) icalo = 2;
  else icalo = 3;

  index.erase(icalo);
  
  event->SetOscWaveformSize(NChanOsc);

  set<int>::iterator it=index.begin();
  Waveform *wf0 = event->GetOscWaveformAt(icalo);
  Waveform *wf1 = event->GetOscWaveformAt(*it); it++;
  Waveform *wf2 = event->GetOscWaveformAt(*it); it++;
  Waveform *wf3 = event->GetOscWaveformAt(*it);
  */

  event->SetOscWaveformSize(NChanOsc);
  Waveform *wf0 = event->GetOscWaveformAt(0);
  Waveform *wf1 = event->GetOscWaveformAt(1);
  Waveform *wf2 = event->GetOscWaveformAt(2);
  Waveform *wf3 = event->GetOscWaveformAt(3);
  

  Double_t *time = new Double_t[fNCounts];

  Double_t *tmpwf0 = new Double_t[fNCounts];
  Double_t *tmpwf1 = new Double_t[fNCounts];
  Double_t *tmpwf2 = new Double_t[fNCounts];
  Double_t *tmpwf3 = new Double_t[fNCounts];

  Int_t sample = 0;

  for(int i=0;i<fNCounts;i++) {

    time[i] = i/SamplingFreq;

    data = gAnalyzer->GetMidasDAQ()->GetLOSCBankAt(i);

    sample = (int)((data & 0xFF000000)>>24);
    tmpwf0[i] = sample*unit1;

    sample = (int)((data & 0xFF0000)>>16);
    tmpwf1[i] = sample*unit2;

    sample = (int)((data & 0xFF00)>>8);
    tmpwf2[i] = sample*unit3;

    sample = (int)(data & 0xFF);
    tmpwf3[i] = sample*unit4;

  }

  wf0->SetNPoints(fNCounts);

  wf0->Set(fNCounts,time,tmpwf0);
  wf1->Set(fNCounts,time,tmpwf1);
  wf2->Set(fNCounts,time,tmpwf2);
  wf3->Set(fNCounts,time,tmpwf3);

  delete [] tmpwf0;
  delete [] tmpwf1;
  delete [] tmpwf2;
  delete [] tmpwf3;


}

//______________________________________________________________________________
void GMCTReadData::EndOfRun()
{

}

//______________________________________________________________________________
void GMCTReadData::Terminate()
{
}

